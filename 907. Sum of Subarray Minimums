class Solution {
    public int sumSubarrayMins(int[] arr) {
        long ans = 0;
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            } else {
                right[i] = -1;
            }
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            } else {
                left[i] = n;
            }
            stack.push(i);
        }
        long mod = 1000000007;
        for (int i = 0; i < n; i++) {
            // System.out.println(arr[i] + " : " + left[i] + " : " + right[i]);
            long leftDistance = i - left[i];
            long rightDistance = right[i] - i;
            long totalDis = arr[i] * leftDistance * rightDistance;
            // System.out.println(arr[i] + " : " + leftDistance + " : " + rightDistance+ " :
            // "+totalDis);
            ans = (ans + totalDis) % mod;
        }
        return (int) ans;
    }
}

TC - O(N)
SC- O(N)
