Time and Space - O(N)

class Solution {
    public int maxDepth(String s) {
        Stack<Character> stack = new Stack();
        int count = 0;
        int max = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') {
                stack.push(c);
                count++;
            } else if (c == ')') {
                stack.pop();
                count--;
            }
            max = Math.max(max, count);
        }
        return max;
    }
}

Time - O(N), Space - O(1)

class Solution {
    public int maxDepth(String s) {
        int count = 0;
        int max = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') {
                count++;
            } else if (c == ')') {
                count--;
            }
            max = Math.max(max, count);
        }
        return max;
    }
}
