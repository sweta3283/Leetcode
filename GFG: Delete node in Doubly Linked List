class Solution
{
    Node deleteHead(Node head){
        if(head == null && head.next == null){
            return null;
        }
        Node prev = head;
        Node front = head.next;
        front.prev = null;
        prev.next = null;
        head = front;
        return head;
    }
    
      Node deleteTail(Node head){
        if(head == null && head.next == null){
            return null;
        }
        Node tail = head;
        while(tail.next != null){
            tail = tail.next;
        }
       
       Node prev = tail.prev;
       prev.next = null;
       tail.prev = null;

       return head;
    }
    // function returns the head of the linkedlist
    Node deleteNode(Node head,int x)
    {
	// Your code here
	if(head == null || head.next == null){
	    return null;
	}
	int count = 0;
	Node temp = head;
	while(temp != null){
	    count++;
	    if(count == x){
	        break;
	    }
	    temp = temp.next;
	}
	Node front = temp.prev;
	Node back = temp.next;

     if (back == null && front == null){
	    return null;
	} else if (front == null){
	   return deleteHead(head);
	} else if(back == null){
	    return deleteTail(head);
	} else {
	    back.prev = front;
	    front.next = back;
	    temp.next = null;
	    temp.prev = null;
	}
	
	return head;
    }
}


Time complexity:
- deleteHead: O(1) as it only involves constant time operations to delete the head node.
- deleteTail: O(n) as it requires traversing the entire linked list to find the tail node.
- deleteNode: O(n) as it requires traversing the linked list to find the node to be deleted.

Space complexity:
- deleteHead: O(1) as it only requires a constant amount of extra space.
- deleteTail: O(1) as it only requires a constant amount of extra space.
- deleteNode: O(1) as it only requires a constant amount of extra space.
