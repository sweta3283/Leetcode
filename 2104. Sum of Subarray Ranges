class Solution {
    // monotonic stack
    // maintain two arrays with indexes of left min and right min if any.
    // Left array will store index if found else -1
    // Right array will store length of nums if not foound else index
    private int[] getRightMin(int nums[]) {
        int n = nums.length;
        int[] right = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                right[i] = -1;
            } else
                right[i] = stack.peek();
            stack.push(i);
        }
        return right;
    }

    private int[] getLeftMin(int nums[]) {
        int n = nums.length;
        int[] left = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                left[i] = n;
            } else
                left[i] = stack.peek();
            stack.push(i);
        }
        return left;
    }

    private int[] getLeftMax(int nums[]) {
        int n = nums.length;
        int[] left = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] <= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                left[i] = n;
            } else
                left[i] = stack.peek();
            stack.push(i);
        }
        return left;
    }

    private int[] getRightMax(int nums[]) {
        int n = nums.length;
        int[] right = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                right[i] = -1;
            } else
                right[i] = stack.peek();
            stack.push(i);
        }
        return right;
    }

    private long subArrayRangesMin(int[] nums) {
        int n = nums.length;
        long ans = 0;

        int[] right = getRightMin(nums);
        int[] left = getLeftMin(nums);

        for (int i = 0; i < n; i++) {
            long leftDis = i - left[i];
            long rightDis = right[i] - i;
            long totalDis = nums[i] * leftDis * rightDis;
            // System.out.println( nums[i] + " : " + left[i] + " : " + right[i]);
            ans = ans + totalDis;
        }
        // System.out.println("subArrayRangesMin : " + ans);
        return ans;
    }

    private long subArrayRangesMax(int[] nums) {
        int n = nums.length;
        long ans = 0;

        int[] right = getRightMax(nums);
        int[] left = getLeftMax(nums);

        for (int i = 0; i < n; i++) {
            long leftDis = i - left[i];
            long rightDis = right[i] - i;
            long totalDis = nums[i] * leftDis * rightDis;
            ans = ans + totalDis;
        }
        // System.out.println("subArrayRangesMax : " + ans);
        return ans;
    }

    public long subArrayRanges(int[] nums) {
        return subArrayRangesMax(nums) - subArrayRangesMin(nums);
    }
}

The time complexity of the getRightMin and getLeftMin methods is O(n), where n is the number of elements in the input array nums. This is because both methods iterate through the array once and perform constant time operations for each element.

The space complexity of the getRightMin and getLeftMin methods is O(n), where n is the number of elements in the input array nums. This is because both methods use a stack data structure that can potentially store all n elements of the input array.

Overall, the time and space complexity of the given code is O(n) due to the linear time complexity of the methods and the linear space complexity of the stack data structure.
