/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        if (root == null)
            return 0;
        int[] maximum = { Integer.MIN_VALUE };
        maxPath(root, maximum);
        return maximum[0];
    }

    public int maxPath(TreeNode root, int[] maximum) {
        if (root == null)
            return 0;

        int lh = Math.max(0, maxPath(root.left, maximum));
        int rh = Math.max(0, maxPath(root.right, maximum));
        maximum[0] = Math.max(maximum[0], lh + rh + root.val);
        return root.val + Math.max(lh, rh);
    }
}

O(N) time and space
