class Solution {
    public int findCircleNum(int[][] isConnected) {
        int V = isConnected.length;
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        boolean[] visited = new boolean[V + 1];
        int count = 0;
        for (int i = 0; i < V; i++) {
            adjList.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                // self nodes are not considered
                if (isConnected[i][j] == 1 && i != j) {
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }
        System.out.println(adjList);
        for (int i = 0; i < V; i++) {
            if (visited[i] == false) {
                count++;
                dfs(i, visited, adjList);

            }
        }
        return count;
    }

    private void dfs(int node, boolean[] visited, ArrayList<ArrayList<Integer>> adjList) {
        visited[node] = true;
        for (Integer it : adjList.get(node)) {
            if (!visited[it])
                dfs(it, visited, adjList);
        }
    }
}
