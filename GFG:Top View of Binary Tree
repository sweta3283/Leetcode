class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    private static class Pair{
        Node node;
        int level;
        public Pair(){
        }
        public Pair(Node node, int level){
            this.node = node;
            this.level = level;
        }
    }
    static ArrayList<Integer> topView(Node root) {
        Queue<Pair> queue = new LinkedList<>();
        ArrayList<Integer> res = new ArrayList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        if(root == null) return res;
        queue.offer(new Pair(root,0));
        while(!queue.isEmpty()){
            Pair pair = queue.poll();
            Node node = pair.node;
            int level = pair.level;
            if (!map.containsKey(level)) {
            map.put(level, node.data);
            }
            if(node.left != null){
                queue.offer(new Pair(node.left,level-1));
            }
            if(node.right != null){
                queue.offer(new Pair(node.right,level+1));
            }
        }
        for(Integer var:map.values()){
            res.add(var);
        }
        return res;
    }
}
