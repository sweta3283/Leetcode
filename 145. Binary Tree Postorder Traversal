/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        postOrder(root, ans);
        return ans;
    }

    public List<Integer> postOrder(TreeNode root, List<Integer> ans) {
        if (root == null) {
            return new ArrayList();
        } else {
            
            postOrder(root.left, ans);
           // System.out.println(root.val);
            postOrder(root.right, ans);
            ans.add(root.val);
        }
        return ans;
    }
}


--------Iteratib=ve--------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        if(root == null){
            return new ArrayList();
        }
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            ans.addFirst(node.val);
            if(node.left != null)
            stack.push(node.left);
            if(node.right != null)
            stack.push(node.right);
        }
        return ans;
    }
}
