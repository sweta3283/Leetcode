Better approach - O(NlogN) + O(N)
Space Complexity - O(1)
class Solution
{   
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
	static int findLongestConseqSubseq(int a[], int n)
	{
	  if(n == 0){
	      return 0;
	  } else {
	      Arrays.sort(a);
	      int count = 0;
	      int max = 1;
	      int lastSmaller = Integer.MIN_VALUE;
	      for (int i=0; i<n; i++){
	          if(a[i] - 1 == lastSmaller){
	              count++;
	              lastSmaller = a[i];
	          } else if(a[i] != lastSmaller ){
	              count = 1;
	              lastSmaller = a[i];
	          }
	         max = Math.max(max, count);
	        // System.out.println(count+ " : "+max);
	      }
	      return max;
	  }
	}
}


---Optimal Solution -- Time complexity - O(N), space - O(N)
class Solution
{   
	static int findLongestConseqSubseq(int a[], int n)
	{
	    int count = 0;
	    int longest = 1;
	  if(n == 0)
	      return 0;
	  Set<Integer> set = new HashSet<>();
	  for (int i = 0; i < n; i++) {
            set.add(a[i]);
        }

	  for(Integer it : set){
	      if(!set.contains(it - 1)){ // 100-1 i.e. 99 does not exist so this could be the start ind of sequence
	          count = 1;
	          int x = it;
	          while(set.contains(x+1)){// check if next elment exist in set i.e. 100+1 = 101 and 102, 103
	            x = x+1;
	            count++;
	          }
	          longest = Math.max(longest,count);
	      }
	      
	  }
	      return longest;
	}
}
