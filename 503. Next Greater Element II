class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int res[] = new int[n];
        Stack<Integer> stack = new Stack();
        
        for (int i = 2 * n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() <= nums[i % n]) {
                stack.pop();
            }
            if (i < n) {
                if (!stack.isEmpty()) {
                    res[i] = stack.peek();
                } else
                    res[i] = -1;
            }
            
            stack.push(nums[i % n]);
        }

        return res;
    }
}

The time complexity of this solution is O(n) because we iterate through the array twice (2n) and perform constant time operations within the loop. The space complexity is also O(n) because we use a stack to store elements, which can grow up to the size of the input array
