/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
     
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        if (fast == null) {
            return head.next;
        }
        ListNode slow = head;
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        ListNode deleteNode = slow.next;
        slow.next = slow.next.next;
        return head;
    }
}

The time complexity of this solution is O(n) where n is the number of nodes in the linked list. This is because we iterate through the linked list twice - once to move the fast pointer n nodes ahead, and then again to find the node before the one to be deleted.

The space complexity is O(1) because we are using a constant amount of extra space, regardless of the size of the input linked list.
