/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> zigzagResult = new ArrayList<>();
        if (root == null) {
            return zigzagResult;
        }
        Queue<TreeNode> queue = new LinkedList<>();

        queue.offer(root);
        boolean leftToRight = true;
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> subList = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                // = queue.front();
                TreeNode node = queue.poll();
                if (leftToRight) {
                    subList.add(node.val);
                } else {
                    subList.addFirst(node.val);
                }
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            leftToRight = !leftToRight;
            zigzagResult.add(subList);
        }
        return zigzagResult;
    }
}

The time complexity of this solution is O(n), where n is the number of nodes in the binary tree. This is because we are visiting each node once during the traversal.

The space complexity is also O(n) in the worst case, as we are using a queue to store the nodes at each level. In the worst case scenario, the queue can contain all the nodes of the binary tree at one level.
