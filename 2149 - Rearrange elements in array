Bruteforce - Time is O(N), Space is O(N) i.e. N/2+N/2

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        int[] pos = new int[n / 2];
        int[] neg = new int[n / 2];
        int posIdx = 0; int negIdx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                pos[posIdx] = nums[i];
                posIdx++;
            } else {
                neg[negIdx] = nums[i];
                negIdx++;
            }
        }
        for (int i = 0; i < n / 2; i++) {
            //System.out.println(pos[i]);
            nums[2 * i] = pos[i];
        }
        for (int i = 0; i < n / 2; i++) {
            System.out.println(neg[i]);
            nums[2 * i + 1] = neg[i];
        }
        // System.out.println(nums);
        return nums;
    }
}
---Optimised with Time O(N) and Space O(N)-- one space will be needed to store

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        int posIdx = 0;
        int negIdx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                res[2 * posIdx] = nums[i];
                posIdx++;
            } else {
                res[2 * negIdx + 1] = nums[i];
                negIdx++;
            }
        }
        return res;
    }
}
